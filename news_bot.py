import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys
import json
import random

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Facts.txt –ë–ï–ó –æ–±—Ä–µ–∑–∞–Ω–∏—è"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return ""
            
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤ –ë–ï–ó –û–ë–†–ï–ó–ê–ù–ò–Ø")
        print(f"üîç –ù–∞—á–∞–ª–æ: {facts[:120]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü: ...{facts[-120:]}")
        
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return ""

def extract_response_content(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É (RESPONSE) –∏ (CONFIDENCE) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤): {text[:200]}...")
        
        start_marker = "(RESPONSE)"
        end_marker = "(CONFIDENCE)"
        
        start_index = text.find(start_marker)
        if start_index == -1:
            print("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä (RESPONSE) –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return text.strip()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ü–û–°–õ–ï –º–∞—Ä–∫–µ—Ä–∞ (RESPONSE)
        start_index += len(start_marker)
        print(f"üìç –ù–∞–π–¥–µ–Ω (RESPONSE) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start_index}")
        
        # –ò—â–µ–º (CONFIDENCE) –ø–æ—Å–ª–µ (RESPONSE)
        end_index = text.find(end_marker, start_index)
        if end_index == -1:
            print("‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä (CONFIDENCE) –Ω–µ –Ω–∞–π–¥–µ–Ω")
            extracted = text[start_index:].strip()
        else:
            print(f"üìç –ù–∞–π–¥–µ–Ω (CONFIDENCE) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end_index}")
            extracted = text[start_index:end_index].strip()
        
        print(f"‚úÇÔ∏è –ò–ó–í–õ–ï–ß–ï–ù–û ({len(extracted)} —Å–∏–º–≤–æ–ª–æ–≤): {extracted[:150]}...")
        return extracted
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return text.strip()

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Gemini Pro 2.5"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if '2.5' in model.name and 'pro' in model.name.lower():
                    print(f"üíé GEMINI PRO 2.5: {model.name}")
                elif 'pro' in model.name.lower():
                    print(f"üíé PRO: {model.name}")
                elif '2.0' in model.name:
                    print(f"‚ö° 2.0: {model.name}")
                else:
                    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model.name}")
        
        print(f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {len(available_models)} –º–æ–¥–µ–ª–µ–π")
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def is_science_news(title, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞—É—á–Ω–æ–π"""
    text = (title + " " + description).lower()
    
    science_keywords = [
        '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—É—á–µ–Ω—ã–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '–Ω–∞—É—á–Ω—ã–π',
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
        '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–Ω–∞—É–∫–∞', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–º–µ–¥–∏—Ü–∏–Ω–∞',
        '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–≥–µ–Ω–µ—Ç–∏–∫–∞', '–¥–Ω–∫', '–±–µ–ª–æ–∫', '–≤–∏—Ä—É—Å',
        '–ª–µ—á–µ–Ω–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '–≤–∞–∫—Ü–∏–Ω–∞', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π',
        '–Ω–µ–π—Ä–æ–Ω—ã', '–º–æ–∑–≥', '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏',
        '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ä–æ–±–æ—Ç', '–∫–≤–∞–Ω—Ç–æ–≤—ã–π',
        '–º–∞—Ç–µ—Ä–∏–∞–ª', '–Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–≥–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è',
        '—Å—Ç–≤–æ–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '—Ä–∞–∫', '–æ–Ω–∫–æ–ª–æ–≥–∏—è', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
        '–º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è', '—ç–∫–æ–ª–æ–≥–∏—è', '–∫–ª–∏–º–∞—Ç', '–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞',
        '—ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–ª–Ω–µ—á–Ω—ã–π', '–≤–µ—Ç—Ä—è–Ω–æ–π', '–±–∞—Ç–∞—Ä–µ—è', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä',
        '—Å–ø—É—Ç–Ω–∏–∫', '–∑–æ–Ω–¥', '–º–∞—Ä—Å', '–ª—É–Ω–∞', '–ø–ª–∞–Ω–µ—Ç–∞', '–≥–∞–ª–∞–∫—Ç–∏–∫–∞',
        'telescope', 'research', 'study', 'discovery', 'experiment'
    ]
    
    exclude_keywords = [
        '–≤—ã–±–æ—Ä—ã', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–¥—É–º–∞', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–º–∏–Ω–∏—Å—Ç—Ä',
        '–ø–æ–ª–∏—Ç–∏–∫', '–ø–∞—Ä—Ç–∏—è', '—Å–∞–Ω–∫—Ü–∏–∏', '–≤–æ–π–Ω–∞', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–ø—Ä–æ—Ç–µ—Å—Ç',
        '–∫—É—Ä—Å –≤–∞–ª—é—Ç', '—Ä—É–±–ª—å', '–¥–æ–ª–ª–∞—Ä', '–Ω–µ—Ñ—Ç—å', '–≥–∞–∑', '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
        '–∏–Ω—Ñ–ª—è—Ü–∏—è', '–±—é–¥–∂–µ—Ç', '–Ω–∞–ª–æ–≥', '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π',
        '–æ–ª–∏–º–ø–∏–∞–¥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–º–∞—Ç—á', '–∏–≥—Ä–∞', '–∫–æ–º–∞–Ω–¥–∞', '—Ç—Ä–µ–Ω–µ—Ä'
    ]
    
    science_score = sum(1 for keyword in science_keywords if keyword in text)
    exclude_score = sum(1 for keyword in exclude_keywords if keyword in text)
    
    return science_score > 0 and exclude_score == 0

def rank_science_news(news_list):
    """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    for news in news_list:
        score = 0
        text = (news['title'] + " " + news['description']).lower()
        
        high_priority = [
            '–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–≤–ø–µ—Ä–≤—ã–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', 'breakthrough',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            '–∫–æ—Å–º–æ—Å', '–º–∞—Ä—Å', '–ª—É–Ω–∞', '—Å–ø—É—Ç–Ω–∏–∫', '—Ç–µ–ª–µ—Å–∫–æ–ø',
            '—Ä–∞–∫', '–æ–Ω–∫–æ–ª–æ–≥–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–≤–∞–∫—Ü–∏–Ω–∞', '–≥–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è',
            '–∫–≤–∞–Ω—Ç–æ–≤—ã–π', '–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è', '–Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            '—Å—Ç–≤–æ–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            '–∫–ª–∏–º–∞—Ç', '–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ', '—ç–∫–æ–ª–æ–≥–∏—è'
        ]
        
        medium_priority = [
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '—Ç–µ—Å—Ç', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–º–µ—Ç–æ–¥', '—Å–∏—Å—Ç–µ–º–∞', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
        ]
        
        for keyword in high_priority:
            if keyword in text:
                score += 10
        
        for keyword in medium_priority:
            if keyword in text:
                score += 5
        
        if news['source'] in ['N+1', 'Naked Science']:
            score += 3
        
        if len(news['description']) > 200:
            score += 2
        
        news['importance_score'] = score
    
    return sorted(news_list, key=lambda x: x['importance_score'], reverse=True)

def get_top_science_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–õ–£–ß–ê–ô–ù–£–Æ –∏–∑ –¢–û–ü-5"""
    print("üî¨ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    all_science_news = []
    
    sources = [
        {
            'url': 'https://naked-science.ru/feed', 
            'name': 'Naked Science'
        },
        {
            'url': 'https://nplus1.ru/rss', 
            'name': 'N+1'
        },
        {
            'url': 'https://hi-news.ru/feed', 
            'name': 'Hi-News'
        },
        {
            'url': 'https://www.popmech.ru/rss/', 
            'name': 'PopMech'
        },
        {
            'url': 'https://lenta.ru/rss/news/science', 
            'name': 'Lenta.ru –ù–∞—É–∫–∞'
        }
    ]
    
    for source in sources:
        try:
            print(f"üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—É—á–Ω—ã–µ...")
                
                for item in items[:10]:
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        if is_science_news(title, description):
                            link = item.link.text.strip() if item.link else ""
                            
                            all_science_news.append({
                                'title': title,
                                'description': description,
                                'source': source['name'],
                                'link': link
                            })
                            
                            print(f"üî¨ {source['name']}: {title[:60]}...")
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {source['name']}: {e}")
            continue
    
    print(f"üî¨ –í—Å–µ–≥–æ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_science_news)}")
    
    ranked_news = rank_science_news(all_science_news)
    
    if ranked_news:
        # –ë–µ—Ä—ë–º –¢–û–ü-5 –Ω–æ–≤–æ—Å—Ç–µ–π
        top_5_news = ranked_news[:5]
        print(f"üèÜ –¢–û–ü-5 –Ω–æ–≤–æ—Å—Ç–µ–π:")
        for i, news in enumerate(top_5_news, 1):
            print(f"   {i}. {news['title'][:60]}... (–æ—á–∫–∏: {news['importance_score']})")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –¢–û–ü-5
        selected_news = random.choice(top_5_news)
        print(f"üé≤ –°–õ–£–ß–ê–ô–ù–û –í–´–ë–†–ê–ù–ê: {selected_news['title'][:80]}... (–æ—á–∫–∏: {selected_news['importance_score']})")
        return selected_news
    else:
        print("‚ùå –ù–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

def initialize_gemini_pro_2_5(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini Pro 2.5"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: Gemini Pro 2.5
    target_models = [
        'models/gemini-2.5-pro',              # üíé PRO 2.5 –æ—Å–Ω–æ–≤–Ω–∞—è
        'models/gemini-2.5-pro-002',          # üíé PRO 2.5 –≤–µ—Ä—Å–∏—è 002
        'models/gemini-2.5-pro-001',          # üíé PRO 2.5 –≤–µ—Ä—Å–∏—è 001
        'models/gemini-2.5-pro-exp',          # üíé PRO 2.5 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è
        'models/gemini-1.5-pro-002',          # üíé PRO 1.5 fallback
        'models/gemini-1.5-pro',              # üíé PRO 1.5 fallback
        'models/gemini-2.0-flash',            # ‚ö° 2.0 fallback
    ]
    
    selected_model = None
    model_version = ""
    
    for model in target_models:
        if model in available_models:
            selected_model = model
            
            if '2.5' in model and 'pro' in model:
                model_version = "üíé GEMINI PRO 2.5"
            elif '1.5' in model and 'pro' in model:
                model_version = "üíé GEMINI PRO 1.5 (fallback)"
            elif '2.0' in model:
                model_version = "‚ö° GEMINI 2.0 (fallback)"
            else:
                model_version = "ü§ñ –î–†–£–ì–ê–Ø –ú–û–î–ï–õ–¨"
            
            print(f"üéØ –í–´–ë–†–ê–ù–ê: {selected_model}")
            print(f"üè∑Ô∏è –í–µ—Ä—Å–∏—è: {model_version}")
            break
    
    if not selected_model:
        selected_model = available_models[0]
        model_version = "ü§ñ FALLBACK"
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: {selected_model}")
    
    try:
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è safety –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        system_instruction = f"""–¢—ã - Alexey Turchin, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —É—á–µ–Ω—ã–π –∏ —Ñ—É—Ç—É—Ä–æ–ª–æ–≥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.

–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {facts[:5000]}...

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
(RESPONSE)
[–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–∏]
(CONFIDENCE)"""

        print(f"üíé –°–æ–∑–¥–∞–µ–º Gemini Pro 2.5 ({len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        model = genai.GenerativeModel(
            model_name=selected_model,
            system_instruction=system_instruction
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ
        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
            }
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Pro 2.5
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=1500,
        )
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {model_version}...")
        test_response = model.generate_content(
            "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏? –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (RESPONSE) —Ç–µ–∫—Å—Ç (CONFIDENCE).",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π safety
        if test_response and test_response.candidates:
            candidate = test_response.candidates[0]
            print(f"üîç Finish reason: {candidate.finish_reason}")
            print(f"üîç Safety ratings: {candidate.safety_ratings}")
            
            if candidate.finish_reason == 1:  # STOP - —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    extracted_response = extract_response_content(text)
                    print(f"‚úÖ {model_version} –≥–æ—Ç–æ–≤: {extracted_response}")
                    return model, extracted_response
                else:
                    print(f"‚ùå {model_version}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            else:
                print(f"‚ùå {model_version}: blocked by safety (finish_reason: {candidate.finish_reason})")
        else:
            print(f"‚ùå {model_version}: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ {model_version}: {e}")
        
    # –ü—Ä–æ—Å—Ç–æ–π fallback
    try:
        print(f"üîÑ {model_version} –ø—Ä–æ—Å—Ç–æ–π fallback...")
        simple_system = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—É–∫–µ. –§–æ—Ä–º–∞—Ç: (RESPONSE) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (CONFIDENCE)"
        
        model = genai.GenerativeModel(
            model_name=selected_model,
            system_instruction=simple_system
        )
        
        test_response = model.generate_content(
            "–ì–æ—Ç–æ–≤?",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        if test_response and test_response.candidates:
            candidate = test_response.candidates[0]
            if candidate.finish_reason == 1 and candidate.content and candidate.content.parts:
                text = candidate.content.parts[0].text
                extracted_response = extract_response_content(text)
                print(f"‚úÖ {model_version} fallback: {extracted_response}")
                return model, extracted_response
                
    except Exception as e2:
        print(f"‚ùå {model_version} fallback: {e2}")
    
    return None, f"{model_version} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

def generate_science_commentary(model, selected_news):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    if not model or not selected_news:
        return None, None
    
    print("üíé Gemini Pro 2.5 –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å...")
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è safety –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    analysis_prompt = f"""–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –Ω–∞—É—á–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å:

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {selected_news['title']}
–û–ø–∏—Å–∞–Ω–∏–µ: {selected_news['description']}
–ò—Å—Ç–æ—á–Ω–∏–∫: {selected_news['source']}

–î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è.

–§–æ—Ä–º–∞—Ç:
(RESPONSE)
–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
(CONFIDENCE)"""
    
    try:
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=1500,
        )
        
        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
            }
        ]
        
        print(f"üíé Gemini Pro 2.5 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        
        if response and response.candidates:
            candidate = response.candidates[0]
            print(f"üîç Finish reason: {candidate.finish_reason}")
            
            if candidate.finish_reason == 1:  # STOP
                if candidate.content and candidate.content.parts:
                    text = candidate.content.parts[0].text
                    print(f"üìÑ RAW –æ—Ç–≤–µ—Ç Gemini Pro 2.5 ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    extracted_commentary = extract_response_content(text)
                    print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Pro 2.5 –æ–±—Ä–µ–∑–∞–Ω –¥–æ ({len(extracted_commentary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return extracted_commentary, analysis_prompt
                else:
                    return "Gemini Pro 2.5: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞", analysis_prompt
            else:
                return f"Gemini Pro 2.5: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ safety (reason: {candidate.finish_reason})", analysis_prompt
        else:
            return "Gemini Pro 2.5: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è Gemini Pro 2.5: {e}")
        return f"Gemini Pro 2.5 –æ—à–∏–±–∫–∞: {e}", analysis_prompt

def clean_text_for_telegram(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram"""
    replacements = {
        '*': '‚Ä¢',
        '_': '-',
        '`': "'",
        '[': '(',
        ']': ')',
        '~': '-',
        '#': '‚Ññ',
        '|': '/',
    }
    
    cleaned_text = text
    for char, replacement in replacements.items():
        if char in cleaned_text:
            cleaned_text = cleaned_text.replace(char, replacement)
    
    lines = cleaned_text.split('\n')
    cleaned_lines = []
    for line in lines:
        cleaned_line = line.strip()
        if cleaned_line:
            cleaned_lines.append(cleaned_line)
    
    return '\n'.join(cleaned_lines)

def send_to_telegram_group(bot_token, group_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≥—Ä—É–ø–ø—É"""
    try:
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –≥—Ä—É–ø–ø—É {group_id}...")
        
        clean_text = clean_text_for_telegram(text)
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        max_length = 4000
        
        if len(clean_text) <= max_length:
            payload = {
                'chat_id': group_id,
                'text': clean_text,
                'disable_web_page_preview': True
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
            
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result['ok']:
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –≥—Ä—É–ø–ø—É!")
                    return True
                else:
                    print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {result}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return False
        
        else:
            parts = []
            current_part = ""
            
            for line in clean_text.split('\n'):
                if len(current_part) + len(line) + 1 <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(parts)} —á–∞—Å—Ç–µ–π...")
            
            for i, part in enumerate(parts, 1):
                payload = {
                    'chat_id': group_id,
                    'text': f"–ß–∞—Å—Ç—å {i}/{len(parts)}\n\n{part}",
                    'disable_web_page_preview': True
                }
                
                response = requests.post(url, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result['ok']:
                        print(f"‚úÖ –ß–∞—Å—Ç—å {i}/{len(parts)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        time.sleep(2)
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i}: {result}")
                        return False
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i}: {response.status_code}")
                    return False
            
            print(f"‚úÖ –í—Å–µ {len(parts)} —á–∞—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        traceback.print_exc()
        return False

def format_for_telegram_group(commentary, selected_news):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è Telegram –≥—Ä—É–ø–ø—ã"""
    now = datetime.now()
    date_formatted = now.strftime("%d.%m.%Y %H:%M")
    
    telegram_text = f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç —Å–∞–π–¥–ª–æ–∞–¥–∞ Alexey Turchin\n"
    telegram_text += f"üìÖ {date_formatted}\n"
    telegram_text += f"üíé –ê–Ω–∞–ª–∏–∑ –æ—Ç Gemini Pro 2.5\n\n"
    telegram_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    telegram_text += f"{commentary}\n\n"
    telegram_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    telegram_text += f"üì∞ –ò–°–•–û–î–ù–ê–Ø –ù–û–í–û–°–¢–¨:\n\n"
    telegram_text += f"üî¨ {selected_news['title']}\n\n"
    
    if selected_news['description']:
        desc = selected_news['description']
        if len(desc) > 400:
            desc = desc[:400] + "..."
        telegram_text += f"{desc}\n\n"
    
    telegram_text += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {selected_news['source']}\n"
    
    if selected_news['link']:
        telegram_text += f"üîó –°—Å—ã–ª–∫–∞: {selected_news['link']}\n"
    
    telegram_text += f"\n‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å: {selected_news['importance_score']} –æ—á–∫–æ–≤"
    
    return telegram_text

def save_science_results(commentary, selected_news, init_response, prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—É—á–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ø–∞–ø–∫—É commentary"""
    directory = 'commentary'
    
    if not os.path.exists(directory):
        print(f"‚ùå –ü–∞–ø–∫–∞ {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {directory}")
    
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        main_filename = os.path.join(directory, f'science_turchin_pro25_{timestamp}.md')
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Gemini Pro 2.5: {main_filename}")
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç Alexey Turchin (Gemini Pro 2.5)\n")
            f.write(f"## {date_formatted}\n\n")
            f.write(f"*–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç Alexey Turchin (—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å)*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## üì∞ –ò—Å—Ö–æ–¥–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å:\n\n")
            f.write(f"### {selected_news['title']}\n\n")
            if selected_news['description']:
                f.write(f"{selected_news['description']}\n\n")
            f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {selected_news['source']}\n")
            if selected_news['link']:
                f.write(f"**–°—Å—ã–ª–∫–∞:** {selected_news['link']}\n")
            f.write(f"**–í–∞–∂–Ω–æ—Å—Ç—å:** {selected_news['importance_score']} –æ—á–∫–æ–≤\n")
        
        stats_filename = os.path.join(directory, f'science_stats_pro25_{timestamp}.txt')
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write("=== ALEXEY TURCHIN GEMINI PRO 2.5 –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write("–ê–≤—Ç–æ—Ä: Alexey Turchin (—Å–∞–π–¥–ª–æ–∞–¥)\n")
            f.write("–ú–æ–¥–µ–ª—å: Gemini Pro 2.5\n")
            f.write("–ì—Ä—É–ø–ø–∞: Alexey & Alexey Turchin sideload news comments\n")
            f.write("–ù–æ–≤–æ—Å—Ç–µ–π: 1 (—Å–ª—É—á–∞–π–Ω–∞—è –∏–∑ –¢–û–ü-5)\n")
            f.write(f"–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"ID: {timestamp}\n")
            f.write(f"–ù–æ–≤–æ—Å—Ç—å: {selected_news['importance_score']} –æ—á–∫–æ–≤ - {selected_news['title'][:50]}...\n")
        
        print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Pro 2.5 —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {main_filename}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_filename}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {directory}: {e}")
        traceback.print_exc()
        return False

def main():
    try:
        print("üíé === ALEXEY TURCHIN GEMINI PRO 2.5 –ö–û–ú–ú–ï–ù–¢–ê–¢–û–† ‚Üí TELEGRAM –ì–†–£–ü–ü–ê ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        gemini_api_key = os.getenv('GEMINI_API_KEY')
        telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Chat ID –≥—Ä—É–ø–ø—ã
        telegram_group_id = "-1002894291419"
        
        if not gemini_api_key:
            print("‚ùå –ù–µ—Ç GEMINI_API_KEY")
            return False
            
        if not telegram_bot_token:
            print("‚ùå –ù–µ—Ç TELEGRAM_BOT_TOKEN")
            return False
        
        print(f"‚úÖ Gemini API: {gemini_api_key[:10]}...")
        print(f"‚úÖ Telegram Bot Token: {telegram_bot_token[:10]}...")
        print(f"üéØ Telegram Group ID: {telegram_group_id}")
        print(f"üë• –ì—Ä—É–ø–ø–∞: Alexey & Alexey Turchin sideload news comments")
        
        genai.configure(api_key=gemini_api_key)
        
        facts = load_facts()
        if not facts:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤")
            return False
        
        model, init_response = initialize_gemini_pro_2_5(facts)
        if not model:
            print("‚ùå Gemini Pro 2.5 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        time.sleep(1)
        
        selected_news = get_top_science_news()
        if not selected_news:
            print("‚ùå –ù–µ—Ç –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        time.sleep(1)
        
        commentary, prompt = generate_science_commentary(model, selected_news)
        if not commentary:
            print("‚ùå Gemini Pro 2.5 –Ω–µ —Å–æ–∑–¥–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return False
        
        save_success = save_science_results(commentary, selected_news, init_response, prompt)
        if not save_success:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        telegram_text = format_for_telegram_group(commentary, selected_news)
        
        telegram_success = send_to_telegram_group(telegram_bot_token, telegram_group_id, telegram_text)
        
        if telegram_success:
            print("üéâ –£–°–ü–ï–•! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Alexey Turchin (Gemini Pro 2.5) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            print("üë• –ì—Ä—É–ø–ø–∞: Alexey & Alexey Turchin sideload news comments")
            print(f"üé≤ –ù–æ–≤–æ—Å—Ç—å: {selected_news['title'][:60]}...")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –≥—Ä—É–ø–ø–µ")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
