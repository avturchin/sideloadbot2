import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {directory}: {e}")
        return False

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Facts.txt —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è Flash-Lite"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return ""
            
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –¥–ª—è Flash-Lite: 30,000 —Å–∏–º–≤–æ–ª–æ–≤
        MAX_FACTS_SIZE = 30000
        
        if len(facts) > MAX_FACTS_SIZE:
            print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üî™ –û–±—Ä–µ–∑–∞–µ–º –¥–æ {MAX_FACTS_SIZE} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Flash-Lite")
            
            # –£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
            truncated = facts[:MAX_FACTS_SIZE]
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            search_start = max(MAX_FACTS_SIZE - 1500, 0)
            last_dot = truncated.rfind('. ', search_start)
            if last_dot > search_start:
                facts = truncated[:last_dot + 2]
            else:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
                last_paragraph = truncated.rfind('\n\n', search_start)
                if last_paragraph > search_start:
                    facts = truncated[:last_paragraph + 2]
                else:
                    facts = truncated
            
            print(f"‚úÇÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"üîç –ù–∞—á–∞–ª–æ: {facts[:120]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü: ...{facts[-120:]}")
        
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return ""

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Flash-Lite"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Flash-Lite...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if 'flash-lite' in model.name.lower():
                    print(f"üí® Flash-Lite: {model.name}")
                elif 'flash' in model.name.lower() and '2.0' in model.name:
                    print(f"‚ö° Gemini 2.0 Flash: {model.name}")
                elif 'flash' in model.name.lower():
                    print(f"‚ö° Flash: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def is_science_news(title, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞—É—á–Ω–æ–π"""
    text = (title + " " + description).lower()
    
    # –ù–∞—É—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    science_keywords = [
        '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—É—á–µ–Ω—ã–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '–Ω–∞—É—á–Ω—ã–π',
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
        '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–Ω–∞—É–∫–∞', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–º–µ–¥–∏—Ü–∏–Ω–∞',
        '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–≥–µ–Ω–µ—Ç–∏–∫–∞', '–¥–Ω–∫', '–±–µ–ª–æ–∫', '–≤–∏—Ä—É—Å',
        '–ª–µ—á–µ–Ω–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '–≤–∞–∫—Ü–∏–Ω–∞', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π',
        '–Ω–µ–π—Ä–æ–Ω—ã', '–º–æ–∑–≥', '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏',
        '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ä–æ–±–æ—Ç', '–∫–≤–∞–Ω—Ç–æ–≤—ã–π',
        '–º–∞—Ç–µ—Ä–∏–∞–ª', '–Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–≥–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è',
        '—Å—Ç–≤–æ–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '—Ä–∞–∫', '–æ–Ω–∫–æ–ª–æ–≥–∏—è', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
        '–º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è', '—ç–∫–æ–ª–æ–≥–∏—è', '–∫–ª–∏–º–∞—Ç', '–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞',
        '—ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–ª–Ω–µ—á–Ω—ã–π', '–≤–µ—Ç—Ä—è–Ω–æ–π', '–±–∞—Ç–∞—Ä–µ—è', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä',
        '—Å–ø—É—Ç–Ω–∏–∫', '–∑–æ–Ω–¥', '–º–∞—Ä—Å', '–ª—É–Ω–∞', '–ø–ª–∞–Ω–µ—Ç–∞', '–≥–∞–ª–∞–∫—Ç–∏–∫–∞',
        'telescope', 'research', 'study', 'discovery', 'experiment'
    ]
    
    # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (–ø–æ–ª–∏—Ç–∏–∫–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Å–ø–æ—Ä—Ç)
    exclude_keywords = [
        '–≤—ã–±–æ—Ä—ã', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–¥—É–º–∞', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–º–∏–Ω–∏—Å—Ç—Ä',
        '–ø–æ–ª–∏—Ç–∏–∫', '–ø–∞—Ä—Ç–∏—è', '—Å–∞–Ω–∫—Ü–∏–∏', '–≤–æ–π–Ω–∞', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–ø—Ä–æ—Ç–µ—Å—Ç',
        '–∫—É—Ä—Å –≤–∞–ª—é—Ç', '—Ä—É–±–ª—å', '–¥–æ–ª–ª–∞—Ä', '–Ω–µ—Ñ—Ç—å', '–≥–∞–∑', '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
        '–∏–Ω—Ñ–ª—è—Ü–∏—è', '–±—é–¥–∂–µ—Ç', '–Ω–∞–ª–æ–≥', '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π',
        '–æ–ª–∏–º–ø–∏–∞–¥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–º–∞—Ç—á', '–∏–≥—Ä–∞', '–∫–æ–º–∞–Ω–¥–∞', '—Ç—Ä–µ–Ω–µ—Ä'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Å–ª–æ–≤
    science_score = sum(1 for keyword in science_keywords if keyword in text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
    exclude_score = sum(1 for keyword in exclude_keywords if keyword in text)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ—Ç –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö/—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö
    return science_score > 0 and exclude_score == 0

def get_science_news():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    print("üî¨ –ü–æ–ª—É—á–∞–µ–º –ù–ê–£–ß–ù–´–ï –Ω–æ–≤–æ—Å—Ç–∏...")
    science_news = []
    
    sources = [
        {
            'url': 'https://naked-science.ru/feed', 
            'name': 'Naked Science'
        },
        {
            'url': 'https://nplus1.ru/rss', 
            'name': 'N+1'
        },
        {
            'url': 'https://hi-news.ru/feed', 
            'name': 'Hi-News'
        },
        {
            'url': 'https://www.popmech.ru/rss/', 
            'name': 'PopMech'
        },
        {
            'url': 'https://lenta.ru/rss/news/science', 
            'name': 'Lenta.ru –ù–∞—É–∫–∞'
        },
        {
            'url': 'https://ria.ru/export/rss2/archive/index.xml', 
            'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'
        }
    ]
    
    for source in sources:
        try:
            print(f"üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—É—á–Ω—ã–µ...")
                
                source_science_count = 0
                for item in items:
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                        if is_science_news(title, description):
                            link = item.link.text.strip() if item.link else ""
                            
                            science_news.append({
                                'title': title,
                                'description': description,
                                'source': source['name'],
                                'link': link
                            })
                            
                            source_science_count += 1
                            print(f"üî¨ {source['name']}: {title[:80]}...")
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                            if source_science_count >= 5:
                                break
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                        continue
                
                print(f"‚úÖ {source['name']}: {source_science_count} –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {source['name']}: {e}")
            continue
    
    print(f"üî¨ –ò–¢–û–ì–û: {len(science_news)} –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    return science_news

def initialize_science_flash_lite(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini 2.0 Flash-Lite –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—É–∫–∏"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: Gemini 2.0 Flash-Lite
    preferred_models = [
        'models/gemini-2.0-flash-lite',
        'models/gemini-2.0-flash-lite-exp',
        'models/gemini-2.0-flash',
        'models/gemini-1.5-flash'
    ]
    
    selected_model = None
    for model in preferred_models:
        if model in available_models:
            selected_model = model
            if 'lite' in model:
                print(f"üî¨ –í–´–ë–†–ê–ù–ê FLASH-LITE –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
            else:
                print(f"‚ö° –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∞—Å–Ω–∞—è –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
            break
    
    if not selected_model:
        selected_model = available_models[0]
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        system_instruction = f"""–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ù–ê–£–ß–ù–´–• –Ω–æ–≤–æ—Å—Ç–µ–π. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:

{facts}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –Ω–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏. 
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞: –º–µ–¥–∏—Ü–∏–Ω–µ, –±–∏–æ–ª–æ–≥–∏–∏, —Ñ–∏–∑–∏–∫–µ, —Ö–∏–º–∏–∏, –∫–æ—Å–º–æ—Å–µ, –ò–ò, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ, —ç–∫–æ–ª–æ–≥–∏–∏.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ø–æ–ª–∏—Ç–∏–∫—É, —ç–∫–æ–Ω–æ–º–∏–∫—É, —Å–ø–æ—Ä—Ç.

–ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""

        print(f"üî¨ –°–æ–∑–¥–∞–µ–º –Ω–∞—É—á–Ω—ã–π Flash-Lite ({len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        model = genai.GenerativeModel(
            model_name=selected_model,
            system_instruction=system_instruction
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Lite
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=200,
        )
        
        print("üî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—É—á–Ω—ã–π Flash-Lite...")
        test_response = model.generate_content(
            "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏?",
            generation_config=generation_config
        )
        
        if test_response and test_response.text:
            print(f"‚úÖ –ù–∞—É—á–Ω—ã–π Flash-Lite –≥–æ—Ç–æ–≤: {test_response.text}")
            return model, test_response.text
        else:
            print("‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return None, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ Flash-Lite: {e}")
        
        # Fallback
        try:
            print("üî¨ –ù–∞—É—á–Ω—ã–π Flash-Lite fallback...")
            simple_system = "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∫—Ä—ã—Ç–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
            
            model = genai.GenerativeModel(
                model_name=selected_model,
                system_instruction=simple_system
            )
            
            test_response = model.generate_content(
                "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É–∫—É?",
                generation_config=generation_config
            )
            
            if test_response and test_response.text:
                print(f"‚úÖ –ù–∞—É—á–Ω—ã–π Flash-Lite fallback: {test_response.text}")
                return model, test_response.text
                
        except Exception as e2:
            print(f"‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite fallback: {e2}")
        
        return None, str(e)

def generate_science_commentary(model, science_news):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Flash-Lite"""
    if not model or not science_news:
        return None, None
    
    print("üî¨ Flash-Lite –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    news_text = ""
    for i, item in enumerate(science_news, 1):
        news_text += f"{i}. üî¨ {item['title']}\n"
        if item['description']:
            desc = item['description'][:250] + "..." if len(item['description']) > 250 else item['description']
            news_text += f"   {desc}\n"
        news_text += f"   ({item['source']})\n\n"
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è:

{news_text}

–î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:

üî¨ –ö–õ–Æ–ß–ï–í–´–ï –û–¢–ö–†–´–¢–ò–Ø:
- –°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –ü—Ä–æ—Ä—ã–≤–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

üöÄ –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ù–î–´:
- –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
- –†–∞–∑–≤–∏—Ç–∏–µ –≤ –ò–ò, –º–µ–¥–∏—Ü–∏–Ω–µ, –∫–æ—Å–º–æ—Å–µ

üß¨ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
- –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è
- –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –≥–µ–Ω–µ—Ç–∏–∫–∞

üåç –í–õ–ò–Ø–ù–ò–ï –ù–ê –ë–£–î–£–©–ï–ï:
- –ö–∞–∫ —ç—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–º–µ–Ω—è—Ç –º–∏—Ä
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

–ü–∏—à–∏ –Ω–∞—É—á–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ."""
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=3000,  # –ë–æ–ª—å—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        )
        
        print(f"üî¨ Flash-Lite –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response.text, analysis_prompt
        else:
            return "Flash-Lite: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Flash-Lite: {e}")
        return f"–ù–∞—É—á–Ω—ã–π Flash-Lite –æ—à–∏–±–∫–∞: {e}", analysis_prompt

def save_science_results(commentary, science_news, init_response, prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if not ensure_directory_exists('science_commentary'):
        return False
    
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        main_filename = f'science_commentary/science_analysis_{timestamp}.md'
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# üî¨ –ê–Ω–∞–ª–∏–∑ –ù–∞—É—á–Ω—ã—Ö –ù–æ–≤–æ—Å—Ç–µ–π - Gemini 2.0 Flash-Lite\n")
            f.write(f"## {date_formatted}\n\n")
            f.write(f"*–ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini 2.0 Flash-Lite*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## üî¨ –ù–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n")
            
            for i, item in enumerate(science_news, 1):
                f.write(f"### {i}. üî¨ {item['title']}\n")
                if item['description']:
                    f.write(f"{item['description']}\n\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source']}\n")
                if item['link']:
                    f.write(f"**–°—Å—ã–ª–∫–∞:** {item['link']}\n")
                f.write("\n---\n\n")
        
        stats_filename = f'science_commentary/science_stats_{timestamp}.txt'
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write(f"=== –ù–ê–£–ß–ù–´–ô GEMINI 2.0 FLASH-LITE ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write(f"–ú–æ–¥–µ–ª—å: Gemini 2.0 Flash-Lite (Science)\n")
            f.write(f"–ù–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(science_news)}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"ID: {timestamp}\n")
        
        print(f"üî¨ –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {timestamp}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def main():
    try:
        print("üî¨ === GEMINI 2.0 FLASH-LITE –ù–ê–£–ß–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† ===")
        
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞")
            return False
        
        genai.configure(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã
        facts = load_facts()
        if not facts:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ Flash-Lite
        model, init_response = initialize_science_flash_lite(facts)
        if not model:
            print("‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        science_news = get_science_news()
        if not science_news:
            print("‚ùå –ù–µ—Ç –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        time.sleep(1)
        
        # –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Flash-Lite
        commentary, prompt = generate_science_commentary(model, science_news)
        if not commentary:
            print("‚ùå Flash-Lite –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É science_commentary
        return save_science_results(commentary, science_news, init_response, prompt)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ù–ê–£–ß–ù–û–ì–û FLASH-LITE: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
