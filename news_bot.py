import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys
import json

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Facts.txt –ë–ï–ó –æ–±—Ä–µ–∑–∞–Ω–∏—è"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return ""
            
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤ –ë–ï–ó –û–ë–†–ï–ó–ê–ù–ò–Ø")
        print(f"üîç –ù–∞—á–∞–ª–æ: {facts[:120]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü: ...{facts[-120:]}")
        
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return ""

def validate_bot_token(bot_token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {bot_token[:10]}...")
        
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        
        print(f"üìä HTTP Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            if data['ok']:
                bot_info = data['result']
                print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω!")
                print(f"   ID: {bot_info['id']}")
                print(f"   –ò–º—è: {bot_info['first_name']}")
                print(f"   Username: @{bot_info.get('username', '–Ω–µ—Ç username')}")
                return True, bot_info
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                return False, data
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False, None

def get_chat_id_from_updates(bot_token):
    """–ü–æ–ª—É—á–∞–µ—Ç Chat ID –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞"""
    try:
        print("üîç –ò—â–µ–º –≤–∞—à Chat ID –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞...")
        
        url = f"https://api.telegram.org/bot{bot_token}/getUpdates"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data['ok'] and data['result']:
                updates = data['result']
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_ids = set()
                for update in updates:
                    if 'message' in update:
                        chat = update['message']['chat']
                        user = update['message']['from']
                        
                        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {user.get('first_name', 'Unknown')} (@{user.get('username', 'no_username')})")
                        print(f"   User ID: {user['id']}")
                        print(f"   Chat ID: {chat['id']}")
                        print(f"   Chat Type: {chat['type']}")
                        
                        if chat['type'] == 'private':
                            chat_ids.add(chat['id'])
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç: {chat['id']}")
                
                if chat_ids:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
                    recommended_id = list(chat_ids)[-1]
                    print(f"üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô TELEGRAM_CHANNEL_ID: {recommended_id}")
                    return recommended_id
                else:
                    print("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return None
            else:
                print("‚ùå –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID: {e}")
        return None

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Flash-Lite"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Flash-Lite...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if 'flash-lite' in model.name.lower():
                    print(f"üí® Flash-Lite: {model.name}")
                elif 'flash' in model.name.lower() and '2.0' in model.name:
                    print(f"‚ö° Gemini 2.0 Flash: {model.name}")
                elif 'flash' in model.name.lower():
                    print(f"‚ö° Flash: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def is_science_news(title, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞—É—á–Ω–æ–π"""
    text = (title + " " + description).lower()
    
    # –ù–∞—É—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    science_keywords = [
        '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—É—á–µ–Ω—ã–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '–Ω–∞—É—á–Ω—ã–π',
        '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
        '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–Ω–∞—É–∫–∞', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–º–µ–¥–∏—Ü–∏–Ω–∞',
        '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–≥–µ–Ω–µ—Ç–∏–∫–∞', '–¥–Ω–∫', '–±–µ–ª–æ–∫', '–≤–∏—Ä—É—Å',
        '–ª–µ—á–µ–Ω–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '–≤–∞–∫—Ü–∏–Ω–∞', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π',
        '–Ω–µ–π—Ä–æ–Ω—ã', '–º–æ–∑–≥', '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏',
        '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ä–æ–±–æ—Ç', '–∫–≤–∞–Ω—Ç–æ–≤—ã–π',
        '–º–∞—Ç–µ—Ä–∏–∞–ª', '–Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–≥–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è',
        '—Å—Ç–≤–æ–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '—Ä–∞–∫', '–æ–Ω–∫–æ–ª–æ–≥–∏—è', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
        '–º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è', '—ç–∫–æ–ª–æ–≥–∏—è', '–∫–ª–∏–º–∞—Ç', '–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞',
        '—ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–ª–Ω–µ—á–Ω—ã–π', '–≤–µ—Ç—Ä—è–Ω–æ–π', '–±–∞—Ç–∞—Ä–µ—è', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä',
        '—Å–ø—É—Ç–Ω–∏–∫', '–∑–æ–Ω–¥', '–º–∞—Ä—Å', '–ª—É–Ω–∞', '–ø–ª–∞–Ω–µ—Ç–∞', '–≥–∞–ª–∞–∫—Ç–∏–∫–∞',
        'telescope', 'research', 'study', 'discovery', 'experiment'
    ]
    
    # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (–ø–æ–ª–∏—Ç–∏–∫–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Å–ø–æ—Ä—Ç)
    exclude_keywords = [
        '–≤—ã–±–æ—Ä—ã', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–¥—É–º–∞', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–º–∏–Ω–∏—Å—Ç—Ä',
        '–ø–æ–ª–∏—Ç–∏–∫', '–ø–∞—Ä—Ç–∏—è', '—Å–∞–Ω–∫—Ü–∏–∏', '–≤–æ–π–Ω–∞', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–ø—Ä–æ—Ç–µ—Å—Ç',
        '–∫—É—Ä—Å –≤–∞–ª—é—Ç', '—Ä—É–±–ª—å', '–¥–æ–ª–ª–∞—Ä', '–Ω–µ—Ñ—Ç—å', '–≥–∞–∑', '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
        '–∏–Ω—Ñ–ª—è—Ü–∏—è', '–±—é–¥–∂–µ—Ç', '–Ω–∞–ª–æ–≥', '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π',
        '–æ–ª–∏–º–ø–∏–∞–¥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–º–∞—Ç—á', '–∏–≥—Ä–∞', '–∫–æ–º–∞–Ω–¥–∞', '—Ç—Ä–µ–Ω–µ—Ä'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Å–ª–æ–≤
    science_score = sum(1 for keyword in science_keywords if keyword in text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
    exclude_score = sum(1 for keyword in exclude_keywords if keyword in text)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ—Ç –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö/—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö
    return science_score > 0 and exclude_score == 0

def rank_science_news(news_list):
    """–†–∞–Ω–∂–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    for news in news_list:
        score = 0
        text = (news['title'] + " " + news['description']).lower()
        
        # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã
        high_priority = [
            '–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–≤–ø–µ—Ä–≤—ã–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', 'breakthrough',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            '–∫–æ—Å–º–æ—Å', '–º–∞—Ä—Å', '–ª—É–Ω–∞', '—Å–ø—É—Ç–Ω–∏–∫', '—Ç–µ–ª–µ—Å–∫–æ–ø',
            '—Ä–∞–∫', '–æ–Ω–∫–æ–ª–æ–≥–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–≤–∞–∫—Ü–∏–Ω–∞', '–≥–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è',
            '–∫–≤–∞–Ω—Ç–æ–≤—ã–π', '–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è', '–Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            '—Å—Ç–≤–æ–ª–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏', '—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            '–∫–ª–∏–º–∞—Ç', '–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ', '—ç–∫–æ–ª–æ–≥–∏—è'
        ]
        
        # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        medium_priority = [
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '—Ç–µ—Å—Ç', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–º–µ—Ç–æ–¥', '—Å–∏—Å—Ç–µ–º–∞', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
        ]
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in high_priority:
            if keyword in text:
                score += 10
        
        for keyword in medium_priority:
            if keyword in text:
                score += 5
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å (–µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
        if news['source'] in ['N+1', 'Naked Science']:
            score += 3
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è (–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏)
        if len(news['description']) > 200:
            score += 2
        
        news['importance_score'] = score
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    return sorted(news_list, key=lambda x: x['importance_score'], reverse=True)

def get_top_science_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    print("üî¨ –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    all_science_news = []
    
    sources = [
        {
            'url': 'https://naked-science.ru/feed', 
            'name': 'Naked Science'
        },
        {
            'url': 'https://nplus1.ru/rss', 
            'name': 'N+1'
        },
        {
            'url': 'https://hi-news.ru/feed', 
            'name': 'Hi-News'
        },
        {
            'url': 'https://www.popmech.ru/rss/', 
            'name': 'PopMech'
        },
        {
            'url': 'https://lenta.ru/rss/news/science', 
            'name': 'Lenta.ru –ù–∞—É–∫–∞'
        }
    ]
    
    for source in sources:
        try:
            print(f"üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—É—á–Ω—ã–µ...")
                
                for item in items[:10]:  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                        if is_science_news(title, description):
                            link = item.link.text.strip() if item.link else ""
                            
                            all_science_news.append({
                                'title': title,
                                'description': description,
                                'source': source['name'],
                                'link': link
                            })
                            
                            print(f"üî¨ {source['name']}: {title[:60]}...")
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {source['name']}: {e}")
            continue
    
    print(f"üî¨ –í—Å–µ–≥–æ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_science_news)}")
    
    # –†–∞–Ω–∂–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    ranked_news = rank_science_news(all_science_news)
    
    # –ë–µ—Ä—ë–º –¢–û–ü-3
    top_3_news = ranked_news[:3]
    
    print(f"üèÜ –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    for i, news in enumerate(top_3_news, 1):
        print(f"   {i}. {news['title'][:80]}... (–æ—á–∫–∏: {news['importance_score']})")
    
    return top_3_news

def initialize_science_flash_lite(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini 2.0 Flash-Lite –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—É–∫–∏"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: Gemini 2.0 Flash-Lite
    preferred_models = [
        'models/gemini-2.0-flash-lite',
        'models/gemini-2.0-flash-lite-exp',
        'models/gemini-2.0-flash',
        'models/gemini-1.5-flash'
    ]
    
    selected_model = None
    for model in preferred_models:
        if model in available_models:
            selected_model = model
            if 'lite' in model:
                print(f"üî¨ –í–´–ë–†–ê–ù–ê FLASH-LITE –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
            else:
                print(f"‚ö° –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∞—Å–Ω–∞—è –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
            break
    
    if not selected_model:
        selected_model = available_models[0]
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –Ω–∞—É–∫–∏: {selected_model}")
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        system_instruction = f"""–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ù–ê–£–ß–ù–´–• –Ω–æ–≤–æ—Å—Ç–µ–π. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:

{facts}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –Ω–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏. 
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞: –º–µ–¥–∏—Ü–∏–Ω–µ, –±–∏–æ–ª–æ–≥–∏–∏, —Ñ–∏–∑–∏–∫–µ, —Ö–∏–º–∏–∏, –∫–æ—Å–º–æ—Å–µ, –ò–ò, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ, —ç–∫–æ–ª–æ–≥–∏–∏.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ø–æ–ª–∏—Ç–∏–∫—É, —ç–∫–æ–Ω–æ–º–∏–∫—É, —Å–ø–æ—Ä—Ç.

–ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""

        print(f"üî¨ –°–æ–∑–¥–∞–µ–º –Ω–∞—É—á–Ω—ã–π Flash-Lite ({len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        model = genai.GenerativeModel(
            model_name=selected_model,
            system_instruction=system_instruction
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Lite
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=200,
        )
        
        print("üî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—É—á–Ω—ã–π Flash-Lite...")
        test_response = model.generate_content(
            "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏?",
            generation_config=generation_config
        )
        
        if test_response and test_response.text:
            print(f"‚úÖ –ù–∞—É—á–Ω—ã–π Flash-Lite –≥–æ—Ç–æ–≤: {test_response.text}")
            return model, test_response.text
        else:
            print("‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return None, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—É—á–Ω–æ–≥–æ Flash-Lite: {e}")
        
        # Fallback
        try:
            print("üî¨ –ù–∞—É—á–Ω—ã–π Flash-Lite fallback...")
            simple_system = "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∫—Ä—ã—Ç–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
            
            model = genai.GenerativeModel(
                model_name=selected_model,
                system_instruction=simple_system
            )
            
            test_response = model.generate_content(
                "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É–∫—É?",
                generation_config=generation_config
            )
            
            if test_response and test_response.text:
                print(f"‚úÖ –ù–∞—É—á–Ω—ã–π Flash-Lite fallback: {test_response.text}")
                return model, test_response.text
                
        except Exception as e2:
            print(f"‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite fallback: {e2}")
        
        return None, str(e)

def generate_science_commentary(model, top_3_news):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–ü-3 –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Flash-Lite"""
    if not model or not top_3_news:
        return None, None
    
    print("üî¨ Flash-Lite –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¢–û–ü-3 –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    news_text = "üèÜ –¢–û–ü-3 –ù–ê–£–ß–ù–´–ï –ù–û–í–û–°–¢–ò:\n\n"
    for i, item in enumerate(top_3_news, 1):
        news_text += f"ü•á {i}. {item['title']}\n"
        if item['description']:
            news_text += f"üìã {item['description']}\n"
        news_text += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
        news_text += f"üéØ –í–∞–∂–Ω–æ—Å—Ç—å: {item['importance_score']} –æ—á–∫–æ–≤\n\n"
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¢–û–ü-3
    analysis_prompt = f"""{news_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:

üî¨ –ö–õ–Æ–ß–ï–í–´–ï –û–¢–ö–†–´–¢–ò–Ø:
- –ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏?
- –ö–∞–∫–∏–µ –ø—Ä–æ—Ä—ã–≤—ã –ø—Ä–æ–∏–∑–æ—à–ª–∏?

üöÄ –ù–ê–£–ß–ù–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:
- –ü–æ—á–µ–º—É —ç—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—É–∫–∏?
- –ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã?

üß¨ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
- –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—é–¥—è–º?
- –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è?

üåç –í–õ–ò–Ø–ù–ò–ï –ù–ê –ë–£–î–£–©–ï–ï:
- –ö–∞–∫ —ç—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–º–µ–Ω—è—Ç –º–∏—Ä?
- –ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è?

–ü–∏—à–∏ –Ω–∞—É—á–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏–π."""
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=2000,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 3 –Ω–æ–≤–æ—Å—Ç–µ–π
        )
        
        print(f"üî¨ Flash-Lite –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¢–û–ü-3 ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¢–û–ü-3 –≥–æ—Ç–æ–≤ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response.text, analysis_prompt
        else:
            return "Flash-Lite: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¢–û–ü-3", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¢–û–ü-3 Flash-Lite: {e}")
        return f"–ù–∞—É—á–Ω—ã–π Flash-Lite –æ—à–∏–±–∫–∞: {e}", analysis_prompt

def clean_text_for_telegram(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram"""
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    problematic_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    replacements = {
        '*': '‚Ä¢',
        '_': '-',
        '`': "'",
        '[': '(',
        ']': ')',
        '~': '-',
        '#': '‚Ññ',
        '|': '/',
    }
    
    cleaned_text = text
    for char, replacement in replacements.items():
        if char in cleaned_text:
            cleaned_text = cleaned_text.replace(char, replacement)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    lines = cleaned_text.split('\n')
    cleaned_lines = []
    for line in lines:
        cleaned_line = line.strip()
        if cleaned_line:
            cleaned_lines.append(cleaned_line)
    
    return '\n'.join(cleaned_lines)

def test_telegram_connection(bot_token, channel_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        print(f"üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram: –±–æ—Ç + –∫–∞–Ω–∞–ª {channel_id}")
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': channel_id,
            'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—É—á–Ω–æ–≥–æ –±–æ—Ç–∞\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ - –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            'disable_web_page_preview': True
        }
        
        response = requests.post(url, json=payload, timeout=15)
        
        if response.status_code == 200:
            result = response.json()
            if result['ok']:
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def send_to_telegram(bot_token, channel_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∫–∞–Ω–∞–ª {channel_id}...")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_text = clean_text_for_telegram(text)
        
        # Telegram Bot API URL
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        max_length = 4000
        
        if len(clean_text) <= max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            payload = {
                'chat_id': channel_id,
                'text': clean_text,
                'disable_web_page_preview': True
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤)...")
            
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result['ok']:
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                    return True
                else:
                    print(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {result}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}")
                return False
        
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for line in clean_text.split('\n'):
                if len(current_part) + len(line) + 1 <= max_length:
                    current_part += line + '\n'
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = line + '\n'
            
            if current_part:
                parts.append(current_part.strip())
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(parts)} —á–∞—Å—Ç–µ–π...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for i, part in enumerate(parts, 1):
                payload = {
                    'chat_id': channel_id,
                    'text': f"–ß–∞—Å—Ç—å {i}/{len(parts)}\n\n{part}",
                    'disable_web_page_preview': True
                }
                
                response = requests.post(url, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result['ok']:
                        print(f"‚úÖ –ß–∞—Å—Ç—å {i}/{len(parts)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i}: {result}")
                        return False
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i}: {response.status_code}")
                    return False
            
            print(f"‚úÖ –í—Å–µ {len(parts)} —á–∞—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        traceback.print_exc()
        return False

def format_for_telegram(commentary, top_3_news):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è Telegram (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown)"""
    now = datetime.now()
    date_formatted = now.strftime("%d.%m.%Y %H:%M")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    telegram_text = f"üî¨ –¢–û–ü-3 –ù–∞—É—á–Ω—ã–µ –û—Ç–∫—Ä—ã—Ç–∏—è\n"
    telegram_text += f"üìÖ {date_formatted}\n"
    telegram_text += f"ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç Gemini 2.0 Flash-Lite\n\n"
    telegram_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò
    telegram_text += f"üìä –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:\n\n"
    telegram_text += f"{commentary}\n\n"
    telegram_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    # –¢–û–ü-3 –Ω–æ–≤–æ—Å—Ç–∏
    telegram_text += f"üèÜ –¢–û–ü-3 –ù–ê–£–ß–ù–´–ï –ù–û–í–û–°–¢–ò:\n\n"
    
    for i, item in enumerate(top_3_news, 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        telegram_text += f"{medal} {i}. {item['title']}\n"
        telegram_text += f"‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å: {item['importance_score']} –æ—á–∫–æ–≤\n\n"
        
        if item['description']:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            desc = item['description']
            if len(desc) > 300:
                desc = desc[:300] + "..."
            telegram_text += f"{desc}\n\n"
        
        telegram_text += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
        
        if item['link']:
            telegram_text += f"üîó –°—Å—ã–ª–∫–∞: {item['link']}\n"
        
        telegram_text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    # –ü–æ–¥–ø–∏—Å—å
    telegram_text += "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
    telegram_text += "‚ö° Powered by Gemini 2.0 Flash-Lite"
    
    return telegram_text

def save_science_results(commentary, top_3_news, init_response, prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¢–û–ü-3 –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ø–∞–ø–∫—É commentary"""
    directory = 'commentary'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(directory):
        print(f"‚ùå –ü–∞–ø–∫–∞ {directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {directory}")
    
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        main_filename = os.path.join(directory, f'science_top3_{timestamp}.md')
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {main_filename}")
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# üèÜ –¢–û–ü-3 –ù–∞—É—á–Ω—ã–µ –ù–æ–≤–æ—Å—Ç–∏ - Gemini 2.0 Flash-Lite\n")
            f.write(f"## {date_formatted}\n\n")
            f.write(f"*–ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-3 –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –æ—Ç Gemini 2.0 Flash-Lite*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## üèÜ –¢–û–ü-3 –ù–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n")
            
            for i, item in enumerate(top_3_news, 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                f.write(f"### {medal} {i}. {item['title']}\n")
                f.write(f"**–í–∞–∂–Ω–æ—Å—Ç—å:** {item['importance_score']} –æ—á–∫–æ–≤\n\n")
                if item['description']:
                    f.write(f"{item['description']}\n\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source']}\n")
                if item['link']:
                    f.write(f"**–°—Å—ã–ª–∫–∞:** {item['link']}\n")
                f.write("\n---\n\n")
        
        stats_filename = os.path.join(directory, f'science_stats_{timestamp}.txt')
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write("=== –ù–ê–£–ß–ù–´–ô GEMINI 2.0 FLASH-LITE –¢–û–ü-3 ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write("–ú–æ–¥–µ–ª—å: Gemini 2.0 Flash-Lite (Science)\n")
            f.write("–ù–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: –¢–û–ü-3\n")
            f.write(f"–î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"ID: {timestamp}\n")
            for i, item in enumerate(top_3_news, 1):
                f.write(f"–ù–æ–≤–æ—Å—Ç—å {i}: {item['importance_score']} –æ—á–∫–æ–≤ - {item['title'][:50]}...\n")
        
        print(f"‚úÖ –¢–û–ü-3 –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {main_filename}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_filename}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {directory}: {e}")
        traceback.print_exc()
        return False

def main():
    try:
        print("üèÜ === GEMINI 2.0 FLASH-LITE –¢–û–ü-3 –ù–ê–£–ß–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† + TELEGRAM ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        gemini_api_key = os.getenv('GEMINI_API_KEY')
        telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        telegram_channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        
        if not gemini_api_key:
            print("‚ùå –ù–µ—Ç GEMINI_API_KEY")
            return False
            
        if not telegram_bot_token:
            print("‚ùå –ù–µ—Ç TELEGRAM_BOT_TOKEN")
            return False
        
        print(f"‚úÖ Gemini API: {gemini_api_key[:10]}...")
        print(f"‚úÖ Telegram Bot Token: {telegram_bot_token[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        is_valid, bot_info = validate_bot_token(telegram_bot_token)
        if not is_valid:
            print("‚ùå –ù–ï–í–ï–†–ù–´–ô –¢–û–ö–ï–ù –ë–û–¢–ê!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
            return False
        
        bot_username = bot_info.get('username', 'unknown')
        print(f"‚úÖ –ë–æ—Ç @{bot_username} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Channel ID
        if not telegram_channel_id:
            print("‚ùå –ù–µ—Ç TELEGRAM_CHANNEL_ID")
            print("üîç –ò—â–µ–º –≤–∞—à Chat ID –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É...")
            
            suggested_id = get_chat_id_from_updates(telegram_bot_token)
            
            if suggested_id:
                print(f"üéØ –ù–ê–ô–î–ï–ù CHAT ID: {suggested_id}")
                print(f"üí° –£–°–¢–ê–ù–û–í–ò–¢–ï –í GITHUB SECRETS:")
                print(f"   TELEGRAM_CHANNEL_ID = {suggested_id}")
                
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID
                print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID: {suggested_id}")
                if test_telegram_connection(telegram_bot_token, suggested_id):
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID: {suggested_id}")
                    telegram_channel_id = suggested_id
                else:
                    print("‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–π ID –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return False
            else:
                print("‚ùå Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print(f"üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
                print(f"1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{bot_username} –≤ Telegram")
                print(f"2. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                print(f"3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
                return False
        else:
            print(f"‚úÖ Channel ID: {telegram_channel_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            if not test_telegram_connection(telegram_bot_token, telegram_channel_id):
                print("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π Channel ID –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print("üîç –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...")
                
                suggested_id = get_chat_id_from_updates(telegram_bot_token)
                if suggested_id and suggested_id != telegram_channel_id:
                    print(f"üí° –ü–û–ü–†–û–ë–£–ô–¢–ï –ù–û–í–´–ô ID: {suggested_id}")
                
                return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=gemini_api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã
        facts = load_facts()
        if not facts:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ–≥–æ Flash-Lite
        model, init_response = initialize_science_flash_lite(facts)
        if not model:
            print("‚ùå –ù–∞—É—á–Ω—ã–π Flash-Lite –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-3 –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        top_3_news = get_top_science_news()
        if not top_3_news:
            print("‚ùå –ù–µ—Ç –Ω–∞—É—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¢–û–ü-3")
            return False
        
        time.sleep(1)
        
        # –ù–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–ü-3 Flash-Lite
        commentary, prompt = generate_science_commentary(model, top_3_news)
        if not commentary:
            print("‚ùå Flash-Lite –Ω–µ —Å–æ–∑–¥–∞–ª –∞–Ω–∞–ª–∏–∑ –¢–û–ü-3")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É commentary
        save_success = save_science_results(commentary, top_3_news, init_response, prompt)
        if not save_success:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
        telegram_text = format_for_telegram(commentary, top_3_news)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        telegram_success = send_to_telegram(telegram_bot_token, telegram_channel_id, telegram_text)
        
        if telegram_success:
            print("üéâ –£–°–ü–ï–•! –ê–Ω–∞–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–û–ü-3 FLASH-LITE + TELEGRAM: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
